@page "/"
@inject GitHubApi GitHub
@inject FileConverter FileConverter
@using Telerik.Blazor.Components.Editor

<TelerikSplitter Width="100%" Height="100%" Orientation="@SplitterOrientation.Vertical">
    <SplitterPanes>
        <!-- Horizontal Panes -->
        <SplitterPane Class="k-pane-flex" Collapsible="false">
            <TelerikSplitter Height="100%">
                <SplitterPanes>
                    <SplitterPane Collapsible="true" Collapsed="true" Size="400px" Max="500px" Min="300px">
                        <header>
                            <h1>Files EdCharbeneau/BlazorFreeEbook</h1>
                        </header>
                        <TelerikTreeList Data="@docs" IdField="Sha" ParentIdField="ParentSha"
                                         ItemsField="Tree" HasChildrenField="HasChildren" OnExpand="OnExpand">

                            <TreeListColumns>
                                <TreeListColumn Field="Path" Expandable="true" Width="50%"></TreeListColumn>
                                <TreeListColumn Field="Size"></TreeListColumn>
                                <TreeListColumn Field="Url" Title="Action">
                                    <Template>
                                        @{
                                            var node = context as TreeNode;
                                            if (node.Type == "blob")
                                            {
                                                <TelerikButton OnClick="@(_ => EditClicked(context as TreeNode))">Edit</TelerikButton>
                                            }
                                        }
                                    </Template>
                                </TreeListColumn>
                            </TreeListColumns>
                        </TelerikTreeList>
                    </SplitterPane>

                    <SplitterPane Collapsible="true">
                        <header>
                            <h1>Telerik Editor</h1>
                            <TelerikButton @onclick="ExportToPdf">Export PDF</TelerikButton>
                        </header>
                        <TelerikEditor @bind-Value="@HtmlState" Width="100%" Height="100%" Tools="@EditorToolSets.All" />
                    </SplitterPane>


                    <SplitterPane Collapsible="true">
                        <header>
                            <h1>Markdown</h1>
                        </header>
                        <TelerikTextArea @bind-Value="@MdState" Width="100%" Class="zoomable" />
                    </SplitterPane>
                </SplitterPanes>
            </TelerikSplitter>
        </SplitterPane>
        <SplitterPane Collapsible="true" Collapsed="true">
            <header>
                <h1>HTML</h1>
            </header>
            @HtmlState
        </SplitterPane>
    </SplitterPanes>
</TelerikSplitter>

@code {

    async Task ExportToPdf()
    {
        // call the export service, it will discern the details based on the extension of the exported file we want
        await FileConverter.ExportAndDownloadHtmlContent(HtmlState, $"EditorContent.pdf");

    }

    string html;
    string HtmlState
    {
        get { return html; }
        set
        {
            md = value.ToMarkdown();
            html = value;
        }
    }

    string md;
    string MdState
    {
        get { return md; }
        set
        {
            md = value;
            html = value.ToHtml();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        MdState = "# New File";
        docs = await GitHub.GetProjectRootNodes("edcharbeneau", "BlazorBookExamples");
    }

    List<TreeNode> docs;

    async Task OnExpand(TreeListExpandEventArgs args)
    {
        var item = args.Item as TreeNode;
        if (item.HasChildren && !docs.Any(x => x.ParentSha == item.Sha))
        {
            var items = await GitHub.GetProjectNodes(item.Url);

            docs.AddRange(items);
        }
    }

    async Task EditClicked(TreeNode node)
    {
        MdState = await GitHub.GetFileResponseAsync(node.Url);
    }
} 